name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POSTGRES_VERSION: "16"
  REDIS_VERSION: "7"

jobs:
  # ============================================================================
  # Code Quality Checks
  # ============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Black (formatting check)
        run: black --check src/ tests/

      - name: Run isort (import sorting check)
        run: isort --check-only src/ tests/

      - name: Run flake8 (linting)
        run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

      - name: Run mypy (type checking)
        run: mypy src/ --ignore-missing-imports

      - name: Run pylint
        run: pylint src/ --disable=C0111,R0903 --max-line-length=100
        continue-on-error: true

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety (dependency vulnerability check)
        run: safety check --file requirements.txt --output text
        continue-on-error: true

      - name: Run Bandit (security linting)
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # ============================================================================
  # Unit Tests
  # ============================================================================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: devmatrix_test
          POSTGRES_USER: devmatrix
          POSTGRES_PASSWORD: devmatrix
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run pytest with coverage
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: devmatrix_test
          POSTGRES_USER: devmatrix
          POSTGRES_PASSWORD: devmatrix
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          ENVIRONMENT: test
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=junit.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            junit.xml
            htmlcov/

  # ============================================================================
  # Integration Tests
  # ============================================================================
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Start services with Docker Compose
        run: |
          docker compose up -d postgres redis
          sleep 10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run integration tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: devmatrix
          POSTGRES_USER: devmatrix
          POSTGRES_PASSWORD: devmatrix
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          pytest tests/integration/ -v --maxfail=3
        continue-on-error: true

      - name: Cleanup
        if: always()
        run: docker compose down -v

  # ============================================================================
  # Build Docker Image
  # ============================================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: development
          push: false
          tags: devmatrix/api:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: false
          tags: devmatrix/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test production image
        run: |
          docker run --rm devmatrix/api:latest python -c "import src; print('Image OK')"
