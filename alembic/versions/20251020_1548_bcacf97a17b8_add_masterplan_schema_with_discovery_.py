"""Add MasterPlan schema with discovery, phases, milestones, tasks

Revision ID: bcacf97a17b8
Revises: 
Create Date: 2025-10-20 15:48:27.387029

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'bcacf97a17b8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('discovery_documents',
    sa.Column('discovery_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.String(length=100), nullable=False),
    sa.Column('user_id', sa.String(length=100), nullable=False),
    sa.Column('user_request', sa.Text(), nullable=False),
    sa.Column('domain', sa.String(length=200), nullable=False),
    sa.Column('bounded_contexts', sa.JSON(), nullable=False),
    sa.Column('aggregates', sa.JSON(), nullable=False),
    sa.Column('value_objects', sa.JSON(), nullable=False),
    sa.Column('domain_events', sa.JSON(), nullable=False),
    sa.Column('services', sa.JSON(), nullable=False),
    sa.Column('assumptions', sa.JSON(), nullable=True),
    sa.Column('clarifications_needed', sa.JSON(), nullable=True),
    sa.Column('risk_factors', sa.JSON(), nullable=True),
    sa.Column('llm_model', sa.String(length=100), nullable=True),
    sa.Column('llm_cost_usd', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('discovery_id')
    )
    op.create_index('idx_discovery_created', 'discovery_documents', ['created_at'], unique=False)
    op.create_index('idx_discovery_session', 'discovery_documents', ['session_id'], unique=False)
    op.create_index('idx_discovery_user', 'discovery_documents', ['user_id'], unique=False)
    op.create_index(op.f('ix_discovery_documents_session_id'), 'discovery_documents', ['session_id'], unique=False)
    op.create_index(op.f('ix_discovery_documents_user_id'), 'discovery_documents', ['user_id'], unique=False)
    op.create_table('masterplans',
    sa.Column('masterplan_id', sa.UUID(), nullable=False),
    sa.Column('discovery_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.String(length=100), nullable=False),
    sa.Column('user_id', sa.String(length=100), nullable=False),
    sa.Column('project_name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'APPROVED', 'IN_PROGRESS', 'PAUSED', 'COMPLETED', 'FAILED', 'CANCELLED', name='masterplanstatus'), nullable=False),
    sa.Column('tech_stack', sa.JSON(), nullable=False),
    sa.Column('architecture_style', sa.String(length=100), nullable=True),
    sa.Column('total_phases', sa.Integer(), nullable=True),
    sa.Column('total_milestones', sa.Integer(), nullable=True),
    sa.Column('total_tasks', sa.Integer(), nullable=True),
    sa.Column('total_subtasks', sa.Integer(), nullable=True),
    sa.Column('completed_tasks', sa.Integer(), nullable=True),
    sa.Column('failed_tasks', sa.Integer(), nullable=True),
    sa.Column('skipped_tasks', sa.Integer(), nullable=True),
    sa.Column('progress_percent', sa.Float(), nullable=True),
    sa.Column('estimated_cost_usd', sa.Float(), nullable=True),
    sa.Column('actual_cost_usd', sa.Float(), nullable=True),
    sa.Column('estimated_duration_minutes', sa.Integer(), nullable=True),
    sa.Column('actual_duration_minutes', sa.Integer(), nullable=True),
    sa.Column('llm_model', sa.String(length=100), nullable=True),
    sa.Column('generation_cost_usd', sa.Float(), nullable=True),
    sa.Column('generation_tokens', sa.Integer(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['discovery_id'], ['discovery_documents.discovery_id'], ),
    sa.PrimaryKeyConstraint('masterplan_id')
    )
    op.create_index('idx_masterplan_created', 'masterplans', ['created_at'], unique=False)
    op.create_index('idx_masterplan_session', 'masterplans', ['session_id'], unique=False)
    op.create_index('idx_masterplan_status', 'masterplans', ['status'], unique=False)
    op.create_index('idx_masterplan_user', 'masterplans', ['user_id'], unique=False)
    op.create_index(op.f('ix_masterplans_session_id'), 'masterplans', ['session_id'], unique=False)
    op.create_index(op.f('ix_masterplans_status'), 'masterplans', ['status'], unique=False)
    op.create_index(op.f('ix_masterplans_user_id'), 'masterplans', ['user_id'], unique=False)
    op.create_table('masterplan_phases',
    sa.Column('phase_id', sa.UUID(), nullable=False),
    sa.Column('masterplan_id', sa.UUID(), nullable=False),
    sa.Column('phase_type', sa.Enum('SETUP', 'CORE', 'POLISH', name='phasetype'), nullable=False),
    sa.Column('phase_number', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('total_milestones', sa.Integer(), nullable=True),
    sa.Column('total_tasks', sa.Integer(), nullable=True),
    sa.Column('completed_tasks', sa.Integer(), nullable=True),
    sa.Column('progress_percent', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['masterplan_id'], ['masterplans.masterplan_id'], ),
    sa.PrimaryKeyConstraint('phase_id')
    )
    op.create_index('idx_phase_masterplan', 'masterplan_phases', ['masterplan_id'], unique=False)
    op.create_index('idx_phase_number', 'masterplan_phases', ['masterplan_id', 'phase_number'], unique=False)
    op.create_table('masterplan_versions',
    sa.Column('version_id', sa.UUID(), nullable=False),
    sa.Column('masterplan_id', sa.UUID(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('change_description', sa.Text(), nullable=True),
    sa.Column('snapshot', sa.JSON(), nullable=False),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['masterplan_id'], ['masterplans.masterplan_id'], ),
    sa.PrimaryKeyConstraint('version_id')
    )
    op.create_index('idx_version_masterplan', 'masterplan_versions', ['masterplan_id'], unique=False)
    op.create_index('idx_version_number', 'masterplan_versions', ['masterplan_id', 'version_number'], unique=False)
    op.create_table('masterplan_milestones',
    sa.Column('milestone_id', sa.UUID(), nullable=False),
    sa.Column('phase_id', sa.UUID(), nullable=False),
    sa.Column('milestone_number', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('depends_on_milestones', sa.JSON(), nullable=True),
    sa.Column('total_tasks', sa.Integer(), nullable=True),
    sa.Column('completed_tasks', sa.Integer(), nullable=True),
    sa.Column('progress_percent', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['phase_id'], ['masterplan_phases.phase_id'], ),
    sa.PrimaryKeyConstraint('milestone_id')
    )
    op.create_index('idx_milestone_number', 'masterplan_milestones', ['phase_id', 'milestone_number'], unique=False)
    op.create_index('idx_milestone_phase', 'masterplan_milestones', ['phase_id'], unique=False)
    op.create_table('masterplan_tasks',
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('milestone_id', sa.UUID(), nullable=False),
    sa.Column('task_number', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=300), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('complexity', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='taskcomplexity'), nullable=False),
    sa.Column('task_type', sa.String(length=100), nullable=True),
    sa.Column('depends_on_tasks', sa.JSON(), nullable=True),
    sa.Column('blocks_tasks', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'READY', 'IN_PROGRESS', 'VALIDATING', 'COMPLETED', 'FAILED', 'SKIPPED', 'BLOCKED', name='taskstatus'), nullable=False),
    sa.Column('target_files', sa.JSON(), nullable=True),
    sa.Column('modified_files', sa.JSON(), nullable=True),
    sa.Column('llm_model', sa.String(length=100), nullable=True),
    sa.Column('llm_prompt', sa.Text(), nullable=True),
    sa.Column('llm_response', sa.Text(), nullable=True),
    sa.Column('llm_cost_usd', sa.Float(), nullable=True),
    sa.Column('llm_tokens_input', sa.Integer(), nullable=True),
    sa.Column('llm_tokens_output', sa.Integer(), nullable=True),
    sa.Column('llm_cached_tokens', sa.Integer(), nullable=True),
    sa.Column('validation_passed', sa.Boolean(), nullable=True),
    sa.Column('validation_errors', sa.JSON(), nullable=True),
    sa.Column('validation_logs', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('max_retries', sa.Integer(), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('failed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['milestone_id'], ['masterplan_milestones.milestone_id'], ),
    sa.PrimaryKeyConstraint('task_id')
    )
    op.create_index('idx_task_milestone', 'masterplan_tasks', ['milestone_id'], unique=False)
    op.create_index('idx_task_number', 'masterplan_tasks', ['milestone_id', 'task_number'], unique=False)
    op.create_index('idx_task_status', 'masterplan_tasks', ['status'], unique=False)
    op.create_index(op.f('ix_masterplan_tasks_status'), 'masterplan_tasks', ['status'], unique=False)
    op.create_table('masterplan_history',
    sa.Column('history_id', sa.UUID(), nullable=False),
    sa.Column('masterplan_id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=True),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('event_data', sa.JSON(), nullable=True),
    sa.Column('actor', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['masterplan_id'], ['masterplans.masterplan_id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['masterplan_tasks.task_id'], ),
    sa.PrimaryKeyConstraint('history_id')
    )
    op.create_index('idx_history_created', 'masterplan_history', ['created_at'], unique=False)
    op.create_index('idx_history_masterplan', 'masterplan_history', ['masterplan_id'], unique=False)
    op.create_index('idx_history_task', 'masterplan_history', ['task_id'], unique=False)
    op.create_index(op.f('ix_masterplan_history_created_at'), 'masterplan_history', ['created_at'], unique=False)
    op.create_table('masterplan_subtasks',
    sa.Column('subtask_id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('subtask_number', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=300), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'READY', 'IN_PROGRESS', 'VALIDATING', 'COMPLETED', 'FAILED', 'SKIPPED', 'BLOCKED', name='taskstatus'), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['masterplan_tasks.task_id'], ),
    sa.PrimaryKeyConstraint('subtask_id')
    )
    op.create_index('idx_subtask_task', 'masterplan_subtasks', ['task_id'], unique=False)
    op.drop_index('idx_cost_created_at', table_name='cost_tracking')
    op.drop_index('idx_cost_model', table_name='cost_tracking')
    op.drop_index('idx_cost_task_id', table_name='cost_tracking')
    op.drop_table('cost_tracking')
    op.drop_index('idx_decisions_approved', table_name='agent_decisions')
    op.drop_index('idx_decisions_task_id', table_name='agent_decisions')
    op.drop_table('agent_decisions')
    op.drop_index('idx_commits_hash', table_name='git_commits')
    op.drop_index('idx_commits_task_id', table_name='git_commits')
    op.drop_table('git_commits')
    op.drop_index('idx_tasks_agent_name', table_name='tasks')
    op.drop_index('idx_tasks_created_at', table_name='tasks')
    op.drop_index('idx_tasks_project_id', table_name='tasks')
    op.drop_index('idx_tasks_status', table_name='tasks')
    op.drop_table('tasks')
    op.drop_index('idx_projects_created_at', table_name='projects')
    op.drop_index('idx_projects_status', table_name='projects')
    op.drop_table('projects')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('projects',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'in_progress'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])", name='valid_status'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_projects_status', 'projects', ['status'], unique=False)
    op.create_index('idx_projects_created_at', 'projects', [sa.text('created_at DESC')], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('agent_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('task_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('input', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('output', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'in_progress'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])", name='valid_task_status'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='tasks_project_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='tasks_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_tasks_status', 'tasks', ['status'], unique=False)
    op.create_index('idx_tasks_project_id', 'tasks', ['project_id'], unique=False)
    op.create_index('idx_tasks_created_at', 'tasks', [sa.text('created_at DESC')], unique=False)
    op.create_index('idx_tasks_agent_name', 'tasks', ['agent_name'], unique=False)
    op.create_table('git_commits',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('commit_hash', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('commit_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('files_changed', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='git_commits_task_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='git_commits_pkey')
    )
    op.create_index('idx_commits_task_id', 'git_commits', ['task_id'], unique=False)
    op.create_index('idx_commits_hash', 'git_commits', ['commit_hash'], unique=False)
    op.create_table('agent_decisions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('decision_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('reasoning', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('approved', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('feedback', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('decided_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='agent_decisions_task_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='agent_decisions_pkey')
    )
    op.create_index('idx_decisions_task_id', 'agent_decisions', ['task_id'], unique=False)
    op.create_index('idx_decisions_approved', 'agent_decisions', ['approved'], unique=False)
    op.create_table('cost_tracking',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('input_tokens', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('output_tokens', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('total_cost_usd', sa.NUMERIC(precision=10, scale=6), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='cost_tracking_task_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='cost_tracking_pkey')
    )
    op.create_index('idx_cost_task_id', 'cost_tracking', ['task_id'], unique=False)
    op.create_index('idx_cost_model', 'cost_tracking', ['model_name'], unique=False)
    op.create_index('idx_cost_created_at', 'cost_tracking', [sa.text('created_at DESC')], unique=False)
    op.drop_index('idx_subtask_task', table_name='masterplan_subtasks')
    op.drop_table('masterplan_subtasks')
    op.drop_index(op.f('ix_masterplan_history_created_at'), table_name='masterplan_history')
    op.drop_index('idx_history_task', table_name='masterplan_history')
    op.drop_index('idx_history_masterplan', table_name='masterplan_history')
    op.drop_index('idx_history_created', table_name='masterplan_history')
    op.drop_table('masterplan_history')
    op.drop_index(op.f('ix_masterplan_tasks_status'), table_name='masterplan_tasks')
    op.drop_index('idx_task_status', table_name='masterplan_tasks')
    op.drop_index('idx_task_number', table_name='masterplan_tasks')
    op.drop_index('idx_task_milestone', table_name='masterplan_tasks')
    op.drop_table('masterplan_tasks')
    op.drop_index('idx_milestone_phase', table_name='masterplan_milestones')
    op.drop_index('idx_milestone_number', table_name='masterplan_milestones')
    op.drop_table('masterplan_milestones')
    op.drop_index('idx_version_number', table_name='masterplan_versions')
    op.drop_index('idx_version_masterplan', table_name='masterplan_versions')
    op.drop_table('masterplan_versions')
    op.drop_index('idx_phase_number', table_name='masterplan_phases')
    op.drop_index('idx_phase_masterplan', table_name='masterplan_phases')
    op.drop_table('masterplan_phases')
    op.drop_index(op.f('ix_masterplans_user_id'), table_name='masterplans')
    op.drop_index(op.f('ix_masterplans_status'), table_name='masterplans')
    op.drop_index(op.f('ix_masterplans_session_id'), table_name='masterplans')
    op.drop_index('idx_masterplan_user', table_name='masterplans')
    op.drop_index('idx_masterplan_status', table_name='masterplans')
    op.drop_index('idx_masterplan_session', table_name='masterplans')
    op.drop_index('idx_masterplan_created', table_name='masterplans')
    op.drop_table('masterplans')
    op.drop_index(op.f('ix_discovery_documents_user_id'), table_name='discovery_documents')
    op.drop_index(op.f('ix_discovery_documents_session_id'), table_name='discovery_documents')
    op.drop_index('idx_discovery_user', table_name='discovery_documents')
    op.drop_index('idx_discovery_session', table_name='discovery_documents')
    op.drop_index('idx_discovery_created', table_name='discovery_documents')
    op.drop_table('discovery_documents')
    # ### end Alembic commands ###
