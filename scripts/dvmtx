#!/bin/bash
# Devmatrix CLI - Management script for Devmatrix services
# Usage: dvmtx <command> [options]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Change to project root
cd "$PROJECT_ROOT"

# Helper functions
print_header() {
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║       Devmatrix CLI - v0.1.0          ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

# Check if Docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        print_error "Docker is not running. Please start Docker first."
        exit 1
    fi
}

# Wrapper for docker compose commands to suppress config warning
docker_compose() {
    docker compose "$@" 2>&1 | grep -v "no configuration file provided: not found" || true
}

# Command: up - Start services
cmd_up() {
    print_header
    print_info "Starting Devmatrix services..."
    check_docker

    docker_compose up -d postgres redis

    echo ""
    print_info "Waiting for services to be healthy..."
    sleep 5

    docker_compose ps
    echo ""
    print_success "Devmatrix is running!"
    print_info "PostgreSQL: localhost:5432"
    print_info "Redis: localhost:6379"
    echo ""
}

# Command: down - Stop services
cmd_down() {
    print_header
    print_info "Stopping Devmatrix services..."

    docker_compose down

    echo ""
    print_success "Devmatrix stopped successfully"
}

# Command: restart - Restart services
cmd_restart() {
    print_header
    print_info "Restarting Devmatrix services..."

    cmd_down
    sleep 2
    cmd_up
}

# Command: status - Show service status
cmd_status() {
    print_header
    check_docker

    print_info "Service Status:"
    docker_compose ps

    echo ""
    print_info "Health Checks:"

    # PostgreSQL health
    if docker exec devmatrix-postgres pg_isready -U devmatrix > /dev/null 2>&1; then
        print_success "PostgreSQL: Healthy"
    else
        print_error "PostgreSQL: Unhealthy"
    fi

    # Redis health
    if docker exec devmatrix-redis redis-cli ping | grep -q PONG; then
        print_success "Redis: Healthy"
    else
        print_error "Redis: Unhealthy"
    fi

    echo ""
}

# Command: logs - Show service logs
cmd_logs() {
    local service="${1:-}"

    print_header

    if [ -z "$service" ]; then
        print_info "Showing logs for all services (Ctrl+C to exit)..."
        docker_compose logs -f
    else
        print_info "Showing logs for $service (Ctrl+C to exit)..."
        docker_compose logs -f "$service"
    fi
}

# Command: clean - Clean all data (DESTRUCTIVE)
cmd_clean() {
    print_header
    print_warning "This will DELETE all data (databases, volumes, etc.)"
    read -p "Are you sure? (yes/NO): " confirm

    if [ "$confirm" = "yes" ]; then
        print_info "Cleaning Devmatrix data..."
        docker_compose down -v
        print_success "All data cleaned"
    else
        print_info "Clean cancelled"
    fi
}

# Command: db - Database operations
cmd_db() {
    local operation="${1:-shell}"

    print_header
    check_docker

    case "$operation" in
        shell|psql)
            print_info "Opening PostgreSQL shell..."
            docker exec -it devmatrix-postgres psql -U devmatrix -d devmatrix
            ;;
        tables)
            print_info "Listing database tables..."
            docker exec devmatrix-postgres psql -U devmatrix -d devmatrix -c "\dt devmatrix.*"
            ;;
        backup)
            local backup_file="devmatrix-backup-$(date +%Y%m%d-%H%M%S).sql"
            print_info "Creating database backup: $backup_file"
            docker exec devmatrix-postgres pg_dump -U devmatrix devmatrix > "backups/$backup_file"
            print_success "Backup created: backups/$backup_file"
            ;;
        *)
            print_error "Unknown db operation: $operation"
            print_info "Available operations: shell, tables, backup"
            exit 1
            ;;
    esac
}

# Command: redis - Redis operations
cmd_redis() {
    local operation="${1:-cli}"

    print_header
    check_docker

    case "$operation" in
        cli)
            print_info "Opening Redis CLI..."
            docker exec -it devmatrix-redis redis-cli
            ;;
        flush)
            print_warning "This will DELETE all Redis data"
            read -p "Are you sure? (yes/NO): " confirm
            if [ "$confirm" = "yes" ]; then
                docker exec devmatrix-redis redis-cli FLUSHALL
                print_success "Redis flushed"
            else
                print_info "Flush cancelled"
            fi
            ;;
        *)
            print_error "Unknown redis operation: $operation"
            print_info "Available operations: cli, flush"
            exit 1
            ;;
    esac
}

# Command: dev - Development tools
cmd_dev() {
    local tool="${1:-help}"

    print_header

    case "$tool" in
        pgadmin)
            print_info "Starting pgAdmin..."
            docker_compose --profile tools up -d pgadmin
            echo ""
            print_success "pgAdmin is running!"
            print_info "URL: http://localhost:5050"
            print_info "Email: admin@devmatrix.local"
            print_info "Password: admin"
            ;;
        install)
            print_info "Installing Python dependencies..."
            pip install -r requirements.txt
            print_success "Dependencies installed"
            ;;
        test)
            print_info "Running tests..."
            pytest
            ;;
        lint)
            print_info "Running linters..."
            ruff check src/
            black --check src/
            mypy src/
            ;;
        format)
            print_info "Formatting code..."
            black src/ tests/
            print_success "Code formatted"
            ;;
        *)
            print_info "Available dev tools:"
            echo "  pgadmin  - Start pgAdmin GUI"
            echo "  install  - Install Python dependencies"
            echo "  test     - Run tests"
            echo "  lint     - Run linters"
            echo "  format   - Format code"
            ;;
    esac
}

# Command: help - Show help
cmd_help() {
    print_header
    echo "Usage: dvmtx <command> [options]"
    echo ""
    echo "Commands:"
    echo "  up              Start Devmatrix services"
    echo "  down            Stop Devmatrix services"
    echo "  restart         Restart Devmatrix services"
    echo "  status          Show service status and health"
    echo "  logs [service]  Show logs (all or specific service)"
    echo "  clean           Clean all data (DESTRUCTIVE)"
    echo ""
    echo "  db <operation>  Database operations"
    echo "    shell         Open PostgreSQL shell"
    echo "    tables        List database tables"
    echo "    backup        Create database backup"
    echo ""
    echo "  redis <op>      Redis operations"
    echo "    cli           Open Redis CLI"
    echo "    flush         Flush all Redis data"
    echo ""
    echo "  dev <tool>      Development tools"
    echo "    pgadmin       Start pgAdmin GUI"
    echo "    install       Install Python dependencies"
    echo "    test          Run tests"
    echo "    lint          Run linters"
    echo "    format        Format code"
    echo ""
    echo "  help            Show this help"
    echo ""
    echo "Examples:"
    echo "  dvmtx up                 # Start services"
    echo "  dvmtx status             # Check health"
    echo "  dvmtx logs postgres      # View PostgreSQL logs"
    echo "  dvmtx db shell           # Open database shell"
    echo "  dvmtx dev pgadmin        # Start pgAdmin"
    echo ""
}

# Main command router
main() {
    local command="${1:-help}"
    shift || true

    case "$command" in
        up)
            cmd_up "$@"
            ;;
        down|stop)
            cmd_down "$@"
            ;;
        restart)
            cmd_restart "$@"
            ;;
        status|ps)
            cmd_status "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        clean|reset)
            cmd_clean "$@"
            ;;
        db|database)
            cmd_db "$@"
            ;;
        redis)
            cmd_redis "$@"
            ;;
        dev)
            cmd_dev "$@"
            ;;
        help|--help|-h)
            cmd_help
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            cmd_help
            exit 1
            ;;
    esac
}

# Run main
main "$@"
