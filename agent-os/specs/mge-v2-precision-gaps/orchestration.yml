# Gap 10: Caching & Reuso - Orchestration Configuration

spec_name: gap-10-caching-reuse
tasks_file: tasks.md
strategy: adaptive
total_effort_days: 5-6
priority: P0_CRITICAL

# Execution Strategy
execution:
  mode: sequential_with_validation_gates
  parallelization:
    enabled: true
    max_concurrent_phases: 2
  validation_gates:
    - phase: 1
      gate: unit_tests_pass
      required: true
    - phase: 2
      gate: unit_tests_pass
      required: true
    - phase: 3
      gate: unit_tests_pass
      required: true
    - phase: 4
      gate: integration_tests_pass
      required: true
    - phase: 5
      gate: success_metrics_verified
      required: true

# Phase Configuration
phases:
  phase_1:
    name: "LLM Prompt Cache"
    days: 1-2
    effort_hours: 13
    tasks: [1.1, 1.2, 1.3, 1.4, 1.5]
    dependencies: []
    deliverables:
      - src/mge/v2/caching/llm_prompt_cache.py
      - tests/mge/v2/caching/test_llm_prompt_cache.py
      - 10+ unit tests passing

  phase_2:
    name: "RAG Query Cache"
    days: 3-4
    effort_hours: 14.5
    tasks: [2.1, 2.2, 2.3, 2.4]
    dependencies: [phase_1]
    deliverables:
      - src/mge/v2/caching/rag_query_cache.py
      - tests/mge/v2/caching/test_rag_query_cache.py
      - 12+ unit tests passing

  phase_3:
    name: "Request Batching"
    days: 5-6
    effort_hours: 12.5
    tasks: [3.1, 3.2, 3.3, 3.4]
    dependencies: []  # Can run in parallel with phase_1 and phase_2
    parallel_with: [phase_1, phase_2]
    deliverables:
      - src/mge/v2/caching/request_batcher.py
      - tests/mge/v2/caching/test_request_batcher.py
      - 8+ unit tests passing

  phase_4:
    name: "Integration"
    days: 6
    effort_hours: 11
    tasks: [4.1, 4.2, 4.3, 4.4]
    dependencies: [phase_1, phase_2, phase_3]
    deliverables:
      - src/mge/v2/execution/llm_client.py (modified)
      - src/api/routers/cache.py
      - tests/mge/v2/caching/test_integration.py
      - 10+ integration tests passing

  phase_5:
    name: "Validation & Monitoring"
    days: 6
    effort_hours: 7
    tasks: [5.1, 5.2, 5.3, 5.4]
    dependencies: [phase_4]
    deliverables:
      - Cache statistics endpoint
      - Success metrics verified
      - Documentation complete

# Success Metrics (Gate 5.3)
success_metrics:
  cache_hit_rate:
    target: 0.60
    actual: null
    measured_via: prometheus
    critical: true

  cost_reduction:
    target: 0.30
    actual: null
    measured_via: cost_tracking
    critical: true

  execution_time_reduction:
    target: 0.40
    actual: null
    measured_via: metrics
    critical: true

  tests_passing:
    target: 30
    actual: null
    critical: true

  redis_fallback:
    target: true
    actual: null
    critical: true

# Testing Strategy
testing:
  unit_tests:
    target: 30
    phases: [1, 2, 3]
    coverage_target: 0.90

  integration_tests:
    target: 10
    phase: 4
    coverage_target: 0.85

  validation_tests:
    phase: 5
    run_with_caching: true
    run_without_caching: true
    compare_metrics: true

# Monitoring Configuration
monitoring:
  prometheus_metrics:
    - name: v2_cache_hits_total
      type: counter
      labels: [cache_layer]
    - name: v2_cache_misses_total
      type: counter
      labels: [cache_layer]
    - name: v2_cache_writes_total
      type: counter
      labels: [cache_layer]
    - name: v2_cache_invalidations_total
      type: counter
      labels: [cache_layer]
    - name: v2_cache_errors_total
      type: counter
      labels: [cache_layer, operation]
    - name: v2_cache_cost_savings_usd_total
      type: counter
      labels: [cache_layer]
    - name: v2_batch_size
      type: histogram
      labels: []
    - name: v2_batch_requests_processed_total
      type: counter
      labels: []

# Dependencies
dependencies:
  external:
    - name: redis
      version: ">=6.0"
      availability: existing_stack
      connection: "redis://localhost:6379"
    - name: redis[asyncio]
      version: ">=4.5.0"
      install: pip
    - name: numpy
      version: ">=1.24.0"
      install: pip
      usage: cosine_similarity

  internal:
    - Gap 9: Cost Guardrails (for cost calculation)
    - Phase 3: Wave Executor (for integration)
    - Phase 5: RAG Engine (for RAG cache integration)

# Risk Management
risks:
  - id: R1
    description: "Cache hit rate <60%"
    probability: medium
    impact: high
    mitigation: "Tune TTL values, analyze patterns, adjust similarity threshold"

  - id: R2
    description: "Redis connection failures"
    probability: low
    impact: high
    mitigation: "Comprehensive error handling, fallback to no cache"

  - id: R3
    description: "Batching adds latency"
    probability: medium
    impact: medium
    mitigation: "Tune batch window (500ms), make batching optional"

  - id: R4
    description: "Cost savings <30%"
    probability: low
    impact: medium
    mitigation: "Analyze cache patterns, increase TTL for stable prompts"

# Configuration
configuration:
  llm_cache:
    ttl_seconds: 86400  # 24 hours
    redis_prefix: "llm_cache:"
    hash_algorithm: "SHA256"

  rag_cache:
    ttl_seconds: 3600  # 1 hour
    redis_prefix: "rag_cache:"
    similarity_threshold: 0.95

  request_batching:
    max_batch_size: 5
    batch_window_ms: 500
    enabled_by_default: false

  redis:
    url: "redis://localhost:6379"
    decode_responses: false
    connection_timeout: 5
    socket_timeout: 5

# Validation Checklist
validation_checklist:
  - id: V1
    description: "LLM cache with 24h TTL"
    phase: 1
    critical: true

  - id: V2
    description: "RAG cache with 1h TTL + similarity matching"
    phase: 2
    critical: true

  - id: V3
    description: "Request batching (max 5 atoms, 500ms window)"
    phase: 3
    critical: true

  - id: V4
    description: "Cache hit rate ≥60% measured via Prometheus"
    phase: 5
    critical: true

  - id: V5
    description: "Cost savings ≥30% measured via cost tracking"
    phase: 5
    critical: true

  - id: V6
    description: "Execution time reduction ≥40% measured via metrics"
    phase: 5
    critical: true

  - id: V7
    description: "30+ tests passing"
    phase: 5
    critical: true

  - id: V8
    description: "Redis fallback working (continue without cache)"
    phase: 4
    critical: true

  - id: V9
    description: "Integration with WaveExecutor complete"
    phase: 4
    critical: true

# Timeline
timeline:
  start_date: "2025-10-25"  # Week 13 start
  end_date: "2025-10-31"    # Week 13 end (5-6 days)

  milestones:
    - day: 2
      milestone: "Phase 1 complete - LLM Cache operational"

    - day: 4
      milestone: "Phase 2 complete - RAG Cache operational"

    - day: 6
      milestone: "Phases 3-5 complete - Full system validated"

# Integration Points
integration:
  llm_client:
    file: src/mge/v2/execution/llm_client.py
    modifications:
      - add: LLMPromptCache instance
      - add: RequestBatcher instance
      - modify: generate() method

  rag_engine:
    file: src/mge/v2/rag/rag_engine.py
    modifications:
      - add: RAGQueryCache instance
      - modify: query() method

  api:
    file: src/api/app.py
    modifications:
      - register: cache router

# Documentation
documentation:
  files:
    - path: DOCS/MGE_V2/caching_guide.md
      content:
        - Architecture overview
        - Configuration options
        - Redis setup
        - Monitoring guide
        - Troubleshooting
        - Usage examples

# Next Steps After Completion
next_steps:
  - "Run E2E validation on test masterplan"
  - "Monitor cache hit rate for 1 week"
  - "Tune TTL values based on patterns"
  - "Create Grafana dashboard for cache metrics"
  - "Proceed to Gap 11: Precision Metric (Week 14)"
