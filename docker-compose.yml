services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: devmatrix-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-devmatrix}
      POSTGRES_USER: ${POSTGRES_USER:-devmatrix}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devmatrix}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-devmatrix}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devmatrix-network

  # Redis for state management
  redis:
    image: redis:7-alpine
    container_name: devmatrix-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devmatrix-network

  # ChromaDB Vector Database for RAG
  chromadb:
    image: chromadb/chroma:latest
    container_name: devmatrix-chromadb
    restart: unless-stopped
    environment:
      IS_PERSISTENT: "TRUE"
      ANONYMIZED_TELEMETRY: "FALSE"
    ports:
      - "${CHROMADB_PORT:-8000}:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    # healthcheck disabled - curl not available in container
    # Manual verification: curl http://localhost:8001/api/v2/heartbeat
    networks:
      - devmatrix-network

  # pgAdmin (Optional - Database GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: devmatrix-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@devmatrix.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - devmatrix-network
    profiles:
      - tools  # Only start with: docker compose --profile tools up

  # UI Development Server (Vite)
  ui:
    image: node:20-alpine
    container_name: devmatrix-ui
    restart: unless-stopped
    working_dir: /app/src/ui
    command: sh -c "npm install && npm run dev"
    ports:
      - "${UI_PORT:-3000}:3000"
    volumes:
      - ./src/ui:/app/src/ui
      - ui_node_modules:/app/src/ui/node_modules
    networks:
      - devmatrix-network
    profiles:
      - dev  # Only start in dev mode: docker compose --profile dev up

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: devmatrix-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-devmatrix}
      POSTGRES_USER: ${POSTGRES_USER:-devmatrix}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devmatrix}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      ENVIRONMENT: development
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-text}
      LOG_FILE: ${LOG_FILE:-}
      # RAG Configuration
      CHROMADB_HOST: chromadb
      CHROMADB_PORT: 8000
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-all-MiniLM-L6-v2}
      RAG_TOP_K: ${RAG_TOP_K:-5}
      RAG_SIMILARITY_THRESHOLD: ${RAG_SIMILARITY_THRESHOLD:-0.7}
      RAG_ENABLE_FEEDBACK: ${RAG_ENABLE_FEEDBACK:-true}
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./workspace:/app/workspace
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    networks:
      - devmatrix-network

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: devmatrix-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - devmatrix-network
    profiles:
      - monitoring  # Only start with: docker compose --profile monitoring up

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: devmatrix-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_SERVER_ROOT_URL: http://localhost:3001
      GF_INSTALL_PLUGINS: ''
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - devmatrix-network
    profiles:
      - monitoring  # Only start with: docker compose --profile monitoring up

  # PostgreSQL Exporter - Exposes PostgreSQL metrics to Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: devmatrix-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-devmatrix}:${POSTGRES_PASSWORD:-devmatrix}@postgres:5432/${POSTGRES_DB:-devmatrix}?sslmode=disable"
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - devmatrix-network
    profiles:
      - monitoring

  # Redis Exporter - Exposes Redis metrics to Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: devmatrix-redis-exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: "redis:6379"
    ports:
      - "${REDIS_EXPORTER_PORT:-9121}:9121"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - devmatrix-network
    profiles:
      - monitoring

networks:
  devmatrix-network:
    driver: bridge
    name: devmatrix-network

volumes:
  postgres_data:
    name: devmatrix-postgres-data
  redis_data:
    name: devmatrix-redis-data
  pgadmin_data:
    name: devmatrix-pgadmin-data
  ui_node_modules:
    name: devmatrix-ui-node-modules
  chromadb_data:
    name: devmatrix-chromadb-data
  prometheus_data:
    name: devmatrix-prometheus-data
  grafana_data:
    name: devmatrix-grafana-data
