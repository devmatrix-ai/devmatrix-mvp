[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "devmatrix"
version = "0.1.0"
description = "AI-Powered Autonomous Software Development System"
authors = [
    {name = "Ariel & Dany"}
]
requires-python = ">=3.12"
dependencies = [
    "langchain>=0.3.0",
    "langgraph>=0.2.0",
    "langchain-anthropic>=0.2.0",
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    "typer>=0.12.0",
    "rich>=13.8.0",
    "redis>=5.1.0",
    "sqlalchemy>=2.0.35",
    "psycopg2-binary>=2.9.9",
    "pydantic>=2.9.0",
    "python-dotenv>=1.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "black>=24.8.0",
    "ruff>=0.6.8",
    "mypy>=1.11.0",
]

[project.scripts]
devmatrix = "devmatrix.cli.main:app"

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long (handled by black)
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--disable-warnings",
]
asyncio_mode = "auto"
timeout = 120
timeout_method = "thread"
log_cli = false
log_cli_level = "INFO"
log_file = "tests/test.log"
log_file_level = "DEBUG"
env_files = [".env.test"]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (require services)",
    "e2e: End-to-end tests (full workflow)",
    "real_api: Tests using real Anthropic API (slow, costs money)",
    "real_services: Tests requiring real PostgreSQL/Redis/ChromaDB",
    "slow: Tests that take >30 seconds",
    "smoke: Quick smoke tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
